security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        oauth:
            id: knpu.oauth2.user_provider
        users_in_memory:
            memory:
                users:
                    teclaizerai@gmail.com: {password: '$2y$13$DzpN/bWe/v/X0DwZVmlZVOyKrQ1yuzE7VM.Z1cdIuG256X8/44Tme', roles: [ 'ROLE_SUPER_ADMIN' ]}
                    admin@example.com: {password: '$2y$13$Bc.qVeuQuHbL.i02TyjFa.faHJuX7TWizBLak7YqwHUsp5U/hfLP2', roles: [ 'ROLE_ADMIN' ]}
                    demo@example.com: {password: '$2y$13$k1pe2mYaWng.NOvHePwsqu0JUqZysHm0noQW27JeFpM23oumTRrQe', roles: [ 'ROLE_USER' ]}

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
        ROLE_ADMIN: [ ROLE_USER]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            #provider: users_in_memory
            provider: oauth
            entry_point: BffWeb\Infrastructure\Framework\Security\Authenticator\OeModules\OeModulesAuthenticator
            custom_authenticators:
                #- BffWeb\Infrastructure\Framework\Security\Authenticator\Github\GithubAuthenticator
                - BffWeb\Infrastructure\Framework\Security\Authenticator\OeModules\OeModulesAuthenticator
            logout:
                path: /logout
                # where to redirect after logout
                target: app_home

            # by default, the feature allows 5 login attempts per minute
            #login_throttling: null

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
