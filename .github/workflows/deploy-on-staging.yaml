# @see https://github.com/deployphp/action
# @see https://deployer.org/docs/7.x/getting-started

name: Deploy on Stage

on:
  workflow_dispatch:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      triggering-sha:
        required: true
        type: string

# It is important to specify "concurrency" for the workflow,
# to prevent concurrency between different deploys.
# @see https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: staging_environment
  cancel-in-progress: true

defaults:
  run:
    shell: bash
    working-directory: engine-service

env:
  # PHP SETTINGS
  PHP_EXTENSIONS: json
  PHP_EXTENSIONS_CACHE_KEY: cache-php-extensions-v1

jobs:
  deploy:
    name: Deploy on staging
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Show CI job info (dump context)
        if: ${{ vars.SHOW_WORKFLOW_INFO == '1'}}
        uses: crazy-max/ghaction-dump-context@v2

      - name: Setup PHP and composer dependencies
        uses: './.github/actions/php-composer-setup'
        with:
          php-version: '8.1'
          composer-working-directory: 'engine-service'
          php-extensions: ${{ env.PHP_EXTENSIONS }}
          extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
          use-php-extensions-cache: ${{ vars.USE_PHP_EXTENSION_CACHE }}
          use-composer-cache: ${{ vars.USE_COMPOSER_CACHE }}
          composer-install-args: '--no-interaction --prefer-dist --no-progress --ansi'

      - name: Install Deployer
        run: |
          composer bin deployer install

      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Prepare env file for staging
        run: |
          touch .env.dev
          echo APP_ENV="$APP_ENV" >> .env.dev
          echo APP_SECRET="$APP_SECRET" >> .env.dev
          echo DATABASE_URL="$DATABASE_URL" >> .env.dev
          echo LOCK_DSN="$LOCK_DSN" >> .env.dev
          echo MAILER_DSN="$MAILER_DSN" >> .env.dev
          echo OAUTH_GITHUB_CLIENT_ID="$OAUTH_GITHUB_CLIENT_ID" >> .env.dev
          echo OAUTH_GITHUB_CLIENT_SECRET="$OAUTH_GITHUB_CLIENT_SECRET" >> .env.dev
          echo OAUTH_OEMODULES_CLIENT_ID="$OAUTH_OEMODULES_CLIENT_ID" >> .env.dev
          echo OAUTH_OEMODULES_CLIENT_SECRET="$OAUTH_OEMODULES_CLIENT_SECRET" >> .env.dev

      - name: Deploy
        uses: deployphp/action@v1
        with:
          deployer-version: "7.3.3"
          dep: deploy stage -o branch=main -f ./engine-service/deploy.php
          private-key: ${{ secrets.DEPLOYER_PRIVATE_SSH_KEY }}
          deployer-binary: "./engine-service/vendor/bin/dep"



  enable-maintenance-mode:
    name: Enable Maintenace mode
    if: ${{ vars.ENABLE_MAINTENANCE_MODE_AFTER_DEPLOY_ON_STAGING == '1'}}
    runs-on: ubuntu-latest
    needs:
      - deploy
    steps:
      - name: Checkout on SHA-${{ inputs.triggering-sha }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.triggering-sha }}

      - name: Show CI job info (dump context)
        if: ${{ vars.SHOW_WORKFLOW_INFO == '1'}}
        uses: crazy-max/ghaction-dump-context@v2

      - name: Setup PHP and composer dependencies
        uses: './.github/actions/php-composer-setup'
        with:
          php-version: '8.1'
          composer-working-directory: 'engine-service'
          php-extensions: ${{ env.PHP_EXTENSIONS }}
          extensions-cache-key:  ${{ env.PHP_EXTENSIONS_CACHE_KEY }}
          use-php-extensions-cache: ${{ vars.USE_PHP_EXTENSION_CACHE }}
          use-composer-cache: ${{ vars.USE_COMPOSER_CACHE }}
          composer-install-args: '--no-interaction --prefer-dist --no-progress --ansi'

      - name: Install Deployer
        run: |
          composer bin deployer install

      - name: Enable Maintenance Mode after deploy
        uses: deployphp/action@v1
        with:
          deployer-version: "7.3.3"
          dep: maintenance:on stage -f ./engine-service/deploy.php
          private-key: ${{ secrets.DEPLOYER_PRIVATE_SSH_KEY }}
          deployer-binary: "./engine-service/vendor/bin/dep"
